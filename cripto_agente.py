import warnings
from pydantic import PydanticDeprecatedSince20

warnings.filterwarnings("ignore", category=PydanticDeprecatedSince20)

from dotenv import load_dotenv
from crewai import Agent, Task, Crew, LLM
from crewai_tools import SerperDevTool
import os
import sys

load_dotenv()


def check_api_keys():
    required_keys = ['SERPER_API_KEY', 'GOOGLE_API_KEY']
    missing_keys = []

    for key in required_keys:
        if not os.getenv(key):
            missing_keys.append(key)

    if missing_keys:
        print("‚ùå ERRO: Chaves de API n√£o encontradas:", missing_keys)
        return False
    return True


if not check_api_keys():
    sys.exit(1)

# Configura o modelo Gemini
gemini_llm = LLM(
    model="gemini/gemini-1.5-flash",
    api_key=os.getenv("GOOGLE_API_KEY")
)

search_tool = SerperDevTool()

# --- AGENTES OTIMIZADOS ---

pesquisador_crypto = Agent(
    role="Pesquisador de Criptomoedas",
    goal="Coletar dados essenciais sobre {crypto_target}",
    backstory="""Voc√™ √© um pesquisador eficiente que coleta apenas os dados mais relevantes.
    Foca em pre√ßos, volume, market cap, not√≠cias recentes e an√°lise t√©cnica b√°sica.""",
    allow_delegation=False,
    verbose=True,
    tools=[search_tool],
    llm=gemini_llm
)

analista_crypto = Agent(
    role="Analista de Criptomoedas",
    goal="Analisar dados e identificar oportunidades para {crypto_target}",
    backstory="""Voc√™ √© um analista pr√°tico que transforma dados em insights r√°pidos.
    Foca em tend√™ncias, oportunidades e riscos principais sem se perder em detalhes.""",
    allow_delegation=False,
    verbose=True,
    llm=gemini_llm
)

estrategista_trading = Agent(
    role="Especialista em Trading",
    goal="Criar estrat√©gias de trading para {crypto_target}",
    backstory="""Voc√™ √© um trader que cria estrat√©gias simples e eficazes.
    Define pontos de entrada, stop-loss e take-profit para diferentes perfis.""",
    allow_delegation=False,
    verbose=True,
    llm=gemini_llm
)

# --- TAREFAS RESUMIDAS ---

tarefa_pesquisa = Task(
    description="""Pesquise dados essenciais sobre {crypto_target}:

    BUSCAS PRINCIPAIS:
    1. "{crypto_target} price coinmarketcap"
    2. "{crypto_target} news today"
    3. "{crypto_target} technical analysis"
    4. "{crypto_target} trading volume"

    COLETE APENAS:
    - Pre√ßo atual e varia√ß√£o 24h
    - Market cap e volume
    - Principais not√≠cias (m√°ximo 3)
    - N√≠veis de suporte e resist√™ncia
    - Tend√™ncia atual (alta/baixa/lateral)""",
    agent=pesquisador_crypto,
    expected_output="Dados essenciais de {crypto_target} com pre√ßos, volume e tend√™ncias."
)

tarefa_analise = Task(
    description="""Analise {crypto_target} de forma resumida:

    AN√ÅLISE OBRIGAT√ìRIA:
    1. **Tend√™ncia Atual**: Alta/Baixa/Lateral (justificativa em 1 linha)
    2. **Principais Oportunidades**: M√°ximo 3 pontos
    3. **Riscos Principais**: M√°ximo 3 pontos
    4. **Recomenda√ß√£o**: Comprar/Manter/Vender

    Seja conciso e direto ao ponto.""",
    agent=analista_crypto,
    expected_output="An√°lise resumida com tend√™ncia, oportunidades e riscos de {crypto_target}."
)

tarefa_estrategias = Task(
    description="""Crie estrat√©gias de trading para {crypto_target}:

    ESTRAT√âGIAS POR PERFIL:

    **CONSERVADOR** üõ°Ô∏è:
    - Entrada: [Pre√ßo espec√≠fico]
    - Stop-loss: [Pre√ßo espec√≠fico] 
    - Take-profit: [Pre√ßo espec√≠fico]

    **MODERADO** ‚öñÔ∏è:
    - Entrada: [Pre√ßo espec√≠fico]
    - Stop-loss: [Pre√ßo espec√≠fico]
    - Take-profit: [Pre√ßo espec√≠fico]

    **ARROJADO** üöÄ:
    - Entrada: [Pre√ßo espec√≠fico]
    - Stop-loss: [Pre√ßo espec√≠fico]
    - Take-profit: [Pre√ßo espec√≠fico]

    Inclua apenas 1 estrat√©gia de renda passiva se aplic√°vel.""",
    agent=estrategista_trading,
    expected_output="Estrat√©gias espec√≠ficas de trading para {crypto_target} com pre√ßos exatos."
)

# --- CREW ---
crew_crypto = Crew(
    agents=[pesquisador_crypto, analista_crypto, estrategista_trading],
    tasks=[tarefa_pesquisa, tarefa_analise, tarefa_estrategias],
    verbose=True
)


def analisar_crypto(crypto_name):
    """Analisa uma criptomoeda espec√≠fica"""
    try:
        print(f"\nüîç Analisando {crypto_name}...")
        resultado = crew_crypto.kickoff(inputs={"crypto_target": crypto_name})

        # Formata√ß√£o do resultado
        relatorio = f"""
# üìä {crypto_name.upper()} - An√°lise Resumida

{resultado}

---
*An√°lise gerada automaticamente*
"""
        return relatorio
    except Exception as e:
        return f"‚ùå Erro na an√°lise: {e}"


def main():
    print("=" * 50)
    print("üöÄ Cripto Assistente PRO - Vers√£o Resumida")
    print("=" * 50)

    opcoes_analise = [
        "An√°lise Geral de Criptomoedas",
        "DeFi", "AI Tokens", "Memecoins", "GameFi",
        "NFT", "Web3", "Metaverse", "Storage"
    ]

    print("üí° Op√ß√µes de an√°lise:")
    for i, opcao in enumerate(opcoes_analise, 1):
        print(f"   {i}. {opcao}")

    print("\nüîç Ou pesquise uma criptomoeda espec√≠fica:")
    print("   Exemplos: Bitcoin, Ethereum, Solana, Cardano")

    while True:
        escolha = input("\nüéØ Escolha uma op√ß√£o (1-9) ou digite uma crypto: ").strip()

        if escolha.lower() in ['sair', 'exit', 'quit']:
            break

        if escolha.isdigit():
            idx = int(escolha) - 1
            if 0 <= idx < len(opcoes_analise):
                target = opcoes_analise[idx]
            else:
                print("‚ùå N√∫mero inv√°lido!")
                continue
        else:
            target = escolha

        if not target:
            print("‚ùå Digite uma op√ß√£o v√°lida!")
            continue

        try:
            resultado = analisar_crypto(target)
            print(resultado)

            # Salva o relat√≥rio
            nome_arquivo = f"analise_{target.replace(' ', '_').lower()}.md"
            with open(nome_arquivo, "w", encoding="utf-8") as f:
                f.write(resultado)
            print(f"\nüíæ An√°lise salva: '{nome_arquivo}'")

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")


if __name__ == "__main__":
    main()